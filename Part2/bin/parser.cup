import java_cup.runtime.*;

/**
 *  Usercode Components
 */
parser code {:
    // Connect this parser to a scanner!
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    // I can enter code her //
:}

/* define how to connect to the scanner! */
scan with {: return s.next_token(); :};

/**
 *  Symbol Lists
 */

/* Terminals (tokens returned by the scanner). */
terminal            CONCAT, LPAREN, RPAREN, LBRACKET, RBRACKET, REVERSE, COMMA, IF, ELSE, PREFIX;
terminal String     STRING_LITERAL, IDENTIFIER;

/*  Non terminals */
non terminal           program;
non terminal String    func, list_of_args, args, next_arg, expr;

/**
 *  Precedence Declarations
 */

precedence left REVERSE, IF, PREFIX;
precedence left LBRACKET, IDENTIFIER, STRING_LITERAL;
precedence left CONCAT;
precedence left LPAREN;

/**
 *  The Grammar Rules
 */

program      ::= func:f {: System.out.println("public class Main{");
                           System.out.println("\tpublic static void main(String[] args){");
                           System.out.printf("%s\t}\n}\n", f);
                        :};
            
func         ::= func:rest IDENTIFIER:id list_of_args:args LBRACKET expr:e RBRACKET func:drest  {: RESULT = String.format("%s%s\t}\n\tpublic static String %s(%s){\n\t\treturn %s;\n", drest, rest ,id, args, e); :}
             |   func:rest expr:e                                                               {: RESULT = String.format("%s\t\tSystem.out.println(%s);\n", rest, e); :}
             |                                                                                  {: RESULT = ""; :}
             ;

list_of_args ::= LPAREN args:a RPAREN                                    {: RESULT = String.format("%s", a); :}
             ;
args         ::= expr:e next_arg:na                                      {: RESULT = String.format("String %s%s", e, na); :}
             |   expr:e list_of_args:a next_arg:na                       {: RESULT = String.format("%s(%s)%s", e, a,na); :}
             |                                                           {: RESULT = ""; :}
             ;
next_arg     ::= COMMA args:a                                            {: RESULT = String.format(",%s", a); :}
             |                                                           {: RESULT = ""; :}
             ;
expr         ::= expr:e1 CONCAT expr:e2                                  {: RESULT = String.format("((%s) + (%s))", e1, e2); :}
             |   REVERSE expr:e                                          {: RESULT = String.format("new StringBuffer(%s).reverse().toString()", e); :}
             |   LPAREN expr:e RPAREN                                    {: RESULT = String.format("(%s)", e); :}
             |   expr:e1 PREFIX expr:e2                                  {: RESULT = String.format("%s.startsWith(%s)", e1, e2); :}
             |   STRING_LITERAL:s                                        {: RESULT = String.format("\"%s\"", s); :}
             |   IDENTIFIER:id                                           {: RESULT = String.format("%s", id); :}
             |   IDENTIFIER:id list_of_args:args                         {: RESULT = String.format("%s(%s)", id,args.replace("String ","")); :}
             |   IF LPAREN expr:e RPAREN expr:ifbody ELSE expr:elsebody  {: RESULT = String.format(" %s ? %s : %s", e, ifbody, elsebody); :}
             ;
